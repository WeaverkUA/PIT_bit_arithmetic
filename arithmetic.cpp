/*У блакитній лізі сьогодні вивчається тема «Бітова арифметика», а тому не дивно, що учні постійно
задають питання типу «А чому дорівнює перший біт числа?» або «А що буде, якщо я проінвертую
останній біт числа?» і т.д. Оскільки Ірині Вільївні надоїло весь час відповідати на ці питання, вона
дала завдання всій групі написати програму, яка виводить у вихідний потік:
• k-ий біт даного числа N;
• число, яке отримано з числа N шляхом установки його k-го біта рівним 1;
• число, яке отримано з числа N шляхом інвертування його k-го біта;
• число, яке отримано з числа N шляхом установки в нуль його останніх k бітів;
• число, яке складається тільки з k останніх бітів числа N (тобто обнулити всі біти числа N, крім
останніх k бітів).
Числа N та k задаються на початку програми, причому k – номер біта в числі N (нумерація
ведеться справа наліво, починаючи з одиниці).*/


#include <iostream>
#include <bits/stdc++.h>
using namespace std;


int main()
{
    int N, temp, power, kbit, num_withk1, num_lastzero, num_firstzero, num_invertk;
    cin >> N >> power;

    kbit = (N >> (power - 1)) & 1;
    cout << kbit << '\n';

    num_withk1 = N | (1 << (power - 1));
    cout << num_withk1 << '\n';
    
    num_invertk = N ^ (1 << (power - 1));
    cout << num_invertk << '\n';

    num_lastzero = N & ~((1 << power) - 1);
    cout << num_lastzero << '\n';
    
    num_firstzero = N & ((1 << power) - 1);
    cout << num_firstzero << '\n';
    return 0;
    
}

